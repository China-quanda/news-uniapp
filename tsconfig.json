// tsconfig.json
//使用小技巧：在填写路径时 ** 表示任意目录， * 表示任意文件。
{
	// 指定要继承的配置文件。
	"extends": [
		// "@tsconfig/node18/tsconfig.json",
		"@vue/tsconfig/tsconfig.json"
	],
	// 定义项目的运行时期望、JavaScript 的发出方式和位置以及与现有 JavaScript 代码的集成级别。
	"compilerOptions": {
		"sourceMap": true, //是否生成相应的Map映射的文件，默认：false。
		"baseUrl": ".", //用于解析非绝对模块名的基本目录，相对模块不受影响。
		"paths": {
			"@/*": ["./*"]
		}, //用于设置模块名称基于baseUrl的路径映射关系。
		"lib": ["esnext", "dom"], // TS需要引用的库
		"types": [
			"@types/node",
			"@dcloudio/types", // uni-app API 类型
			"@types/uni-app",
      "miniprogram-api-typings", // 原生微信小程序类型
			"@types/wechat-miniprogram",// 针对微信小程序的声明类型文件提示
      "@uni-helper/uni-app-types", // uni-app 组件类型
      "@uni-helper/uni-ui-types" // uni-ui 组件类型
		], // 用来指定需要包含的模块，并将其包含在全局范围内。
		"target": "esnext", // 目标语言的版本
		"useUnknownInCatchVariables": true,
		"module": "esnext", // 生成代码的模板标准

		// "outDir": "./dist", // 指定输出目录
		// "rootDir": "./", // 指定输出文件目录(用于输出)，用于控制输出目录结构
		// "allowJs": true, // 允许编译器编译JS，JSX文件
		// "checkJs": true, // 允许在JS文件中报错，通常与allowJS一起使用
		// "removeComments": true, // 删除注释
		// "esModuleInterop": true, // 允许export=导出，由import from 导入

		/* 严格检查选项 */
		"strict": true, // 开启所有严格的类型检查
		// "alwaysStrict": true, // 在代码中注入'use strict'
		"noImplicitAny": false, // 不允许隐式的any类型
		// "noImplicitThis": true, // 不允许this有隐式的any类型
		// "strictNullChecks": true, // 不允许把null、undefined赋值给其他类型的变量
		// "strictBindCallApply": true, // 严格的bind/call/apply检查
		// "strictFunctionTypes": true, // 不允许函数参数双向协变
		// "strictPropertyInitialization": true, // 类的实例属性必须初始化

		// 额外检查
		// "noUnusedLocals": true,//是否检查未使用的局部变量
		// "noUnusedParameters": true,//是否检查未使用的参数
		// "noImplicitReturns": true,//检查函数是否不含有隐式返回值
		// "noImplicitOverride": true,//是否检查子类继承自基类时，其重载的函数命名与基类的函数不同步问题
		// "noFallthroughCasesInSwitch": true,//检查switch中是否含有case没有使用break跳出
		// "noUncheckedIndexedAccess": true,//是否通过索引签名来描述对象上有未知键但已知值的对象
		// "noPropertyAccessFromIndexSignature": true,//是否通过" . “(obj.key) 语法访问字段和"索引”( obj[“key”])， 以及在类型中声明属性的方式之间的一致性
		/* 实验选项 */
		// "experimentalDecorators": true,//是否启用对装饰器的实验性支持，装饰器是一种语言特性，还没有完全被 JavaScript 规范批准
		// "emitDecoratorMetadata": true,//为装饰器启用对发出类型元数据的实验性支持

		/* 高级选项 */
		// "forceConsistentCasingInFileNames": true,//是否区分文件系统大小写规则
		// "extendedDiagnostics": false,//是否查看 TS 在编译时花费的时间
		// "noEmitOnError": true,//有错误时不进行编译
		"resolveJsonModule": true, //是否解析 JSON 模块
		"useDefineForClassFields": true, // 此标志用作迁移到即将推出的类字段标准版本的一部分，默认：false
		"skipLibCheck": true, //是否跳过声明文件的类型检查，这可以在编译期间以牺牲类型系统准确性为代价来节省时间，默认：false。

		// 模块解析选项
		"moduleResolution": "node", // 指定模块解析策略，node或classic
		
		
		"esModuleInterop": true, // 允许export=导出，由import from 导入 //是否通过为所有导入模块创建命名空间对象，允许CommonJS和ES模块之间的互操作性，开启改选项时，也自动开启allowSyntheticDefaultImports选项，默认：false。
		"allowSyntheticDefaultImports": true, // 是否允许从没有默认导出的模块中默认导入，默认：false。

		// 项目选项
		
		"importHelpers": true, // 是否将辅助函数从 tslib 模块导入，默认：false。
		"jsx": "preserve", // 指定JSX代码生成用于的开发环境。
	},
	"vueCompilerOptions": {
    "nativeTags": ["block", "component", "template", "slot"],
  },
	// 指定被编译文件所在的目录
	"include": [
		"./**/*.ts",
		"./**/*.d.ts",
		"./**/*.tsx",
		"./**/*.vue",
		"/**/*.ts", "/**/*.d.ts", "/**/*.tsx", "/**/*.vue",
		"./src/**/*.ts", "./src/**/*.d.ts", "./src/**/*.tsx", "./src/**/*.vue",
		"src/**/*.ts", "src/**/*.d.ts", "src/**/*.tsx", "src/**/*.vue",
		"pages/**/*.ts", "pages/**/*.d.ts", "pages/**/*.tsx", "pages/**/*.vue",
		"./pages/**/*.ts", "./pages/**/*.d.ts", "./pages/**/*.tsx", "./pages/**/*.vue",
		// unplugin-auto-import/vite自动引入的类型声明文件
		// "./typings/**/*.d.ts",
		// "./typings/**/*.ts",
		// "./typings/auto-imports.d.ts"
	],
	// 指定不需要被编译的目录
	"exclude": [
		"node_modules",
		"unpackage",
		"src/**/*.nvue",
	]
}